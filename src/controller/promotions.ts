import PromotionModel from "../models/PromotionModel"
import SubscribeModel from "../models/SubscribeModel"
import { handleSendEmail } from "../utils/handleSendEmail"

const addNew = async (req: any, res: any) => {
    const body = req.body
    const {code} = body
    try {
        const item = await PromotionModel.findOne({code})
        if(item) {
            throw new Error('M√£ code n√†y ƒë√£ t·ªìn t·∫°i!!!')
        }

        const promotion = new PromotionModel(body)
        await promotion.save()

        res.status(200).json({
            message: 'Th√™m khuy·∫øn m·∫°i/gi·∫£m gi√° th√†nh c√¥ng.',
            data: promotion
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const getPromotion = async (req: any, res: any) => {
    try {
        const promotions = await PromotionModel.find({})
        res.status(200).json({
            message: 'L·∫•y th√¥ng tin khuy·∫øn m·∫°i/gi·∫£m gi√° th√†nh c√¥ng',
            data: promotions
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const removePromotion = async (req: any, res: any) => {
    const {id} = req.query
    try {
        await PromotionModel.findByIdAndDelete(id)
        res.status(200).json({
            message: 'X√≥a ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i/gi·∫£m gi√° th√†nh c√¥ng.',
            data: {}
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const updatePromotion = async (req: any, res: any) => {
    const body = req.body
    const {id} = req.query
    try {
        const promotion = await PromotionModel.findByIdAndUpdate(id, body)
        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i/gi·∫£m gi√° th√†nh c√¥ng.',
            data: promotion
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const checkPromotion = async (req: any, res: any) => {
    const query = req.query
    const {value} = query
    try {
        const item = await PromotionModel.findOne({code: value})
        if(item && item.endAt && item.startAt) {
            const startDate = new Date(item.startAt)
            const endDate = new Date(item.endAt)
            const dateNow = new Date()
            if(dateNow > endDate) {
                throw new Error('M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n')
            } else if (dateNow < startDate) {
                throw new Error('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá')
            } else {
                res.status(200).json({
                    message: '√Åp m√£ gi·∫£m gi√° th√†nh c√¥ng',
                    data: item
                })
            }
        } else {
            throw new Error('M√£ gi·∫£m gi√° kh√¥ng t·ªìn t·∫°i!!')
        }
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const handleNotification = async (req: any, res: any) => {
    const {id} = req.query
    try {
        const code = await PromotionModel.findById(id)
        const allEmail = await SubscribeModel.find({}).lean()
        for(const item of allEmail) {
            await handleSendEmail({
                from: 'Nh√† h√†ng H·∫£i D∆∞∆°ng',
                to: item.email,
                subject: "üéâ ∆Øu ƒë√£i ƒë·∫∑c bi·ªát d√†nh cho b·∫°n ‚Äì M√£ gi·∫£m gi√° m·ªõi!",
                text: `Ch√†o b·∫°n! Nh√† h√†ng H·∫£i D∆∞∆°ng g·ª≠i t·∫∑ng b·∫°n m·ªôt m√£ gi·∫£m gi√° ƒë·∫∑c bi·ªát. ƒê·ª´ng b·ªè l·ª°!`,
                html: `
                    <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9;">
                        <div style="max-width: 600px; margin: auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                            <h2 style="color: #d6336c;">üéÅ M√£ Gi·∫£m Gi√° ƒê·∫∑c Bi·ªát D√†nh Ri√™ng Cho B·∫°n!</h2>
                            <p>Nh√† h√†ng <strong>H·∫£i D∆∞∆°ng</strong> xin g·ª≠i t·∫∑ng b·∫°n m·ªôt ∆∞u ƒë√£i ƒë·∫∑c bi·ªát nh∆∞ l·ªùi c·∫£m ∆°n v√¨ ƒë√£ ƒë·ªìng h√†nh c√πng ch√∫ng t√¥i.</p>
                            
                            <h3>‚ú® Chi ti·∫øt ∆∞u ƒë√£i:</h3>
                            <ul style="line-height: 1.6;">
                                <li><strong>M√£ gi·∫£m gi√°:</strong> <span style="color: #2b6cb0; font-size: 18px;"><strong>${code?.code}</strong></span></li>
                                <li><strong>Gi√° tr·ªã:</strong>${code?.value}</li>
                                <li><strong>Th·ªùi h·∫°n s·ª≠ d·ª•ng:</strong> ƒê·∫øn h·∫øt ng√†y ${code?.endAt}</li>
                            </ul>
                            
                            <p style="margin-top: 20px;">Nhanh tay s·ª≠ d·ª•ng m√£ gi·∫£m gi√° khi ƒë·∫∑t b√†n ho·∫∑c ƒë·∫øn tr·ª±c ti·∫øp nh√† h√†ng nh√©!</p>
                            
                            <p style="margin-top: 30px;">Tr√¢n tr·ªçng,</p>
                            <p><strong>Nh√† h√†ng H·∫£i D∆∞∆°ng</strong></p>
                        </div>
                    </div>
                `,
            });
        }

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i/gi·∫£m gi√° th√†nh c√¥ng.',
            data: ''
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

export { addNew, getPromotion, removePromotion, updatePromotion, checkPromotion, handleNotification }