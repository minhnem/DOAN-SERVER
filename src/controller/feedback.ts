import FeedbackModel from "../models/FeedbackModel"
import { handleSendEmail } from "../utils/handleSendEmail"

const addNewFeedback = async (req: any, res: any) => {
    const body = req.body
    try {
        const feedback = new FeedbackModel(body)
        const item = await feedback.save()

        res.status(200).json({
            message: 'Th√™m 1 th√¥ng tin ƒë√°nh gi√° th√†nh c√¥ng.',
            data: feedback
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const getFeedbackById = async (req: any, res: any) => {
    const id = req.query
    try {
        const feedback = await FeedbackModel.findById(id)
        res.status(200).json({
            message: 'L·∫•y ƒë√°nh gi√° theo id th√†nh c√¥ng',
            data: feedback
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}


const getAllFeedbackStatus = async (req: any, res: any) => {
    const query = req.query
    const {status} = query
    try {
        const Feedback = await FeedbackModel.find({status: status})
        res.status(200).json({
            message: 'Th√†nh c√¥ng',
            data: Feedback
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const removeFeedback = async (req: any, res: any) => {
    const {id} = req.query
    try {
        await FeedbackModel.findByIdAndDelete(id)
        res.status(200).json({
            message: 'X√≥a th√¥ng tin ƒë√°nh gi√° th√†nh c√¥ng.',
            data: {}
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const updateFeedback = async (req: any, res: any) => {
    const body = req.body
    const {id} = req.query
    try {
        const feedback = await FeedbackModel.findByIdAndUpdate(id, body)
        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t th√¥ng tin ƒë√°nh gi√° th√†nh c√¥ng.',
            data: feedback
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

const replyFeedback = async (req: any, res: any) => {
    const body = req.body
    const {id} = req.query
    try {
        const feedback = await FeedbackModel.findByIdAndUpdate(id, {status: 'ƒê√£ ph·∫£n h·ªìi'})
        if(feedback?.email) {
            await handleSendEmail({
                from: 'Nh√† h√†ng H·∫£i D∆∞∆°ng',
                to: feedback.email,
                subject: "üì© Ph·∫£n h·ªìi t·ª´ Nh√† h√†ng H·∫£i D∆∞∆°ng",
                text: `Ch√†o b·∫°n, ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi c·ªßa b·∫°n v√† xin g·ª≠i l·∫°i c√¢u tr·∫£ l·ªùi nh∆∞ sau: ${body.content}`,
                html: `
                    <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9;">
                        <div style="max-width: 600px; margin: auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
                            <h2 style="color: #2b6cb0;">üì© Ph·∫£n h·ªìi t·ª´ Nh√† h√†ng H·∫£i D∆∞∆°ng</h2>
                            <p>Ch√†o b·∫°n,</p>
                            <p>Ch√∫ng t√¥i xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi ƒë·∫øn Nh√† h√†ng <strong>H·∫£i D∆∞∆°ng</strong>.</p>
                            <p>Sau ƒë√¢y l√† n·ªôi dung ph·∫£n h·ªìi c·ªßa ch√∫ng t√¥i:</p>
                            <div style="border-left: 4px solid #2b6cb0; padding-left: 15px; margin: 20px 0; color: #333;">
                                ${body.content}
                            </div>
                            <p>Hy v·ªçng ph·∫£n h·ªìi c·ªßa ch√∫ng t√¥i gi√∫p b·∫°n h√†i l√≤ng. R·∫•t mong ƒë∆∞·ª£c ti·∫øp t·ª•c ph·ª•c v·ª• b·∫°n trong th·ªùi gian t·ªõi.</p>
                            <p style="margin-top: 30px;">Tr√¢n tr·ªçng,</p>
                            <p><strong>Nh√† h√†ng H·∫£i D∆∞∆°ng</strong></p>
                        </div>
                    </div>
                `,
            });
        }
        res.status(200).json({
            message: 'Ph·∫£n h·ªìi d·∫øn kh√°ch h√†ng th√†nh c√¥ng.',
            data: feedback
        })
    } catch (error: any) {
        res.status(404).json({
            message: error.message
        })
    }
}

export {addNewFeedback, getAllFeedbackStatus, getFeedbackById, removeFeedback, updateFeedback, replyFeedback}